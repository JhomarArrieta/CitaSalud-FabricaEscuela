# Nombre descriptivo del workflow que aparecerá en la pestaña "Actions" de GitHub
name: CI/CD Pipeline

# --- Disparadores (Triggers) ---
# Define cuándo se debe ejecutar este workflow
on:
  # Se ejecuta en CUALQUIER push a la rama "main"
  push:
    branches: [ "main" ]
  # Se ejecuta en CUALQUIER pull request que apunte a la rama "main"
  pull_request:
    branches: [ "main" ]

# --- Trabajos (Jobs) ---
# Un workflow se compone de uno o más jobs que se ejecutan en paralelo (o secuencialmente)
jobs:

  # --- Job 1: Construir y Probar (Build & Test) ---
  # Este job es responsable de compilar el código y ejecutar todos los tests unitarios.
  # Se ejecuta en Pull Requests y Pushes.
  build-and-test:
    # El nombre que se mostrará en la UI de GitHub para este job
    name: Build, Test, and Package
    # Usamos la última versión estable de Ubuntu como sistema operativo
    runs-on: ubuntu-latest

    # Pasos (Steps) que componen el job
    steps:
      # Paso 1: Clonar el repositorio
      # Descarga el código fuente de tu repositorio al runner de GitHub
      - name: Checkout repository
        uses: actions/checkout@v4

      # Paso 2: Configurar el JDK (Java)
      # Instala la versión de Java que tu proyecto necesita.
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          # Tu pom.xml especifica Java 21, así que lo usamos aquí
          java-version: '21'
          # Usamos la distribución 'temurin' (antes AdoptOpenJDK), muy estándar
          distribution: 'temurin'
          # Habilitar el caché de Maven
          # Esto guarda las dependencias descargadas para acelerar builds futuros
          cache: 'maven'

      # Paso 3: Construir y Probar con Maven
      # Ejecuta los comandos de Maven para compilar, probar y verificar.
      - name: Build and test with Maven
        # 'mvn clean verify' es el comando estándar de CI.
        # 'clean' borra builds anteriores.
        # 'verify' compila, ejecuta tests y empaqueta el JAR.
        # '-B' (batch mode) evita logs interactivos.
        run:  mvn -B -Dproject.build.sourceEncoding=UTF-8 -Dproject.reporting.outputEncoding=UTF-8 clean verify

      # Paso 4: Subir el artefacto (el .jar)
      # Guarda el archivo .jar generado para que el job de 'deploy' pueda usarlo.
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          # El nombre que le damos a este artefacto
          name: spring-boot-jar
          # La ruta donde Maven genera el .jar. El '*' encuentra tu JAR
          # (ej. CITASaludApplication-0.0.1-SNAPSHOT.jar)
          path: target/*.jar