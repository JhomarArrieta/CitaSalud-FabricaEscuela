# Mutaciones del esquema GraphQL.
# - Las operaciones que modifican estado o realizan autenticación se colocan aquí.
# - Recomendación de seguridad: transmitir siempre credenciales sobre HTTPS/TLS.
type Mutation {
    # Autentica un usuario con email y contraseña.
    # Parámetros:
    #  - email: correo electrónico del usuario (identificador).
    #  - contrasena: contraseña en texto plano enviada desde el cliente (debe viajar por TLS).
    # Retorna un AuthResponse que contiene el token JWT si la autenticación es exitosa.
    login(email: String!, contrasena: String!): AuthResponse

    # Nueva mutación del agendamiento
    agendarExamen(input: AgendamientoInput!): CitaExamen!
}

# DTO de respuesta para operaciones de autenticación.
# - Mantener intencionalmente mínimo para no exponer datos sensibles.
# - token: JWT firmado por el servidor; usar para autorizar solicitudes subsiguientes.
type AuthResponse {
    token: String!
}

# Consultas públicas / placeholders.
# - _dummy se mantiene para compatibilidad con herramientas/validaciones que requieren al menos
#   una consulta definida. Puede eliminarse o reemplazarse por consultas reales del dominio.
type Query {
    _dummy: String

    # Nuevas queries del agendamiento
    fechasDisponibles: [String!]!
    sedesDisponibles(fecha: String!): [Sede!]!
    tiposExamenDisponibles(fecha: String!, sedeId: Int!): [TipoExamen!]!
    examenesDisponibles(fecha: String!, sedeId: Int!, tipoExamenId: Int!): [Examen!]!
}

# Nuevos tipos del agendamiento
type Sede {
    id: ID!
    nombre: String
    direccion: String
}

type TipoExamen {
    id: ID!
    nombre: String
}

type Examen {
    id: ID!
    nombre: String
    preparacionRequerida: String
}

type CitaExamen {
    id: ID!
    fechaHora: String
    estado: String
    examen: Examen
    sede: Sede
}

# Nuevo input del agendamiento
input AgendamientoInput {
    usuarioId: Int!
    sedeId: Int!
    examenId: Int!
    fechaHora: String!
}